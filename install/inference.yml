apiVersion: v1
kind: Template

labels:
  application: logo-detector-inference

metadata:
  name: logo-detector-inference

parameters:
  - name: APPLICATION_NAME
    value: logo-detector-inference
    required: true
  - name: ROUTE_NAME
    value: inference
    required: true
  - name: REPLICAS
    value: "2"
    required: true
  - name: PORT
    value: "8080"
    required: true
  - name: IP
    value: "0.0.0.0"
    required: true
  - name: IMAGE_REPOSITORY
    value: quay.io/cfchase/logo-detector-inference:latest
    required: true
  - name: CONTAINER_REQUEST_CPU
    value: '4'
  - name: CONTAINER_REQUEST_MEMORY
    value: 4Gi
  - name: CONTAINER_LIMIT_CPU
    value: '4'
  - name: CONTAINER_LIMIT_MEMORY
    value: 8Gi


objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: IP
                  value: "${IP}"
                - name: PORT
                  value: "${PORT}"
              image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 180
                periodSeconds: 60
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 180
                periodSeconds: 60
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${ROUTE_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
